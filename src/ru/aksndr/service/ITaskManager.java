package ru.aksndr.service;

import ru.aksndr.domain.Epic;
import ru.aksndr.domain.SubTask;
import ru.aksndr.domain.Task;
import ru.aksndr.exceptions.TasksIntersectsException;

import java.util.Collection;
import java.util.List;

public interface ITaskManager {
    // Операции с задачами

    /**
     * Сохраняет задачу.
     * Проверяет задачу на пересечение, добавляет в список задач с новым идентификатором и добавляет в список приоритетных задач.
     * @param task Задача, которую нужно сохранить.
     */
    Task createTask(Task task) throws TasksIntersectsException;

    /**
     * Возвращает задачу по ее идентификатору.
     * Если задача существует, добавляет ее в историю.
     *
     * @param id Идентификатор задачи.
     * @return Задача с указанным идентификатором или null, если задачи не существует.
     */
    Task getTask(int id);

    /**
     * Обновляет информацию о задаче.
     * Если задача существует, проверяет ее на валидность, обновляет список приоритетных задач и список задач.
     *
     * @param task Обновленная информация о задаче.
     */
    Task updateTask(Task task) throws TasksIntersectsException;

    /**
     * Удаляет задачу по ее идентификатору.
     * Если задача существует, удаляет ее из списков задач, приоритетных задач и истории.
     *
     * @param id Идентификатор задачи.
     */
    void deleteTask(int id);

    /**
     * Возвращает список всех задач.
     * @return Список всех задач.
     */
    Collection<Task> getAllTasks();

    /**
     * Удаляет все задачи.
     * Удаляет задачи из списков tasks, historyManager и prioritizedTasks.
     */
    void deleteAllTasks();

    // Операции с подзадачами
    /**
     * Сохраняет подзадачу.
     * Проверяет подзадачу на валидность, добавляет ее в список подзадач subtasks с новым идентификатором,
     * и связывает подзадачу с соответствующим эпиком в списке эпиков epics.
     *
     * @param subtask Подзадача для сохранения.
     */
    SubTask createSubTask(SubTask subtask) throws TasksIntersectsException;

    /**
     * Возвращает подзадачу по ее идентификатору.
     * Если подзадача существует, добавляет ее в историю.
     *
     * @param id Идентификатор подзадачи.
     * @return Подзадача с указанным идентификатором или null, если подзадачи не существует.
     */
    SubTask getSubTask(int id);

    /**
     * Обновляет информацию о подзадаче.
     * Если подзадача и связанный эпик существуют, обновляет информацию в списках подзадач
     * и связанных эпиков, а также проверяет статус эпика и устанавливает время завершения эпика.
     * Если подзадачи или эпика с указанными идентификаторами не существует,
     * выводит сообщение "Такой подзадачи или эпика не существует".
     *
     * @param subtask Обновленная информация о подзадаче.
     */
    SubTask updateSubTask(SubTask subtask) throws TasksIntersectsException;

    /**
     * Удаляет подзадачу по ее идентификатору.
     * Если подзадача существует, удаляет ее из списков, истории и связанного эпика.
     * Обновляет статус эпика и устанавливает время завершения эпика.
     *
     * @param id Идентификатор подзадачи.
     */
    void deleteSubTask(int id);

    /**
     * Возвращает список всех подзадач.
     *
     * @return Список всех подзадач.
     */
    Collection<SubTask> getAllSubTasks();

    /**
     * Удаляет все подзадачи.
     * Удаляет подзадачи из списка по эпикам и устанавливает нулевые значения информации об эпиках.
     * Удаляет подзадачи из истории и списка приоритетных задач.
     */
    void deleteAllSubTasks();

    /**
     * Добавляет подзадачу в эпик.
     *
     * @param epic Эпик для добавления подзадачи.
     * @param subTask Подзадача для добавления.
     */
    void addSubTaskToEpic(Epic epic, Task subTask);

    // Операции с эпиками
    /**
     * Сохраняет эпик.
     * Добавляет эпик в список эпиков с новым идентификатором и статусом "NEW".
     * Устанавливает идентификатор и генерирует новый идентификатор.
     *
     * @param epic Эпик для сохранения.
     */
    Epic createEpic(Epic epic);

    /**
     * Возвращает эпик по его идентификатору.
     * Если эпик существует, добавляет его в историю.
     *
     * @param id Идентификатор эпика.
     * @return Эпик с указанным идентификатором или null, если эпика не существует.
     */
    Epic getEpic(int id);

    /**
     * Обновляет информацию об эпике.
     * Если эпик существует, обновляет его в списке эпиков и проверяет его статус.
     * Если эпика с указанным идентификатором не существует, выводит сообщение "Эпика по введенному id не существует".
     *
     * @param epic Обновленная информация об эпике.
     */
    void updateEpic(Epic epic);

    /**
     * Удаляет эпик по его идентификатору.
     * Если эпик существует, удаляет его из списков, а также удаляет подзадачи связанные с этим эпиком из списков,
     * истории и списков приоритетных задач.
     * Если эпика с указанным идентификатором не существует, выводит сообщение "Некорректный id".
     *
     * @param id Идентификатор эпика.
     */
    void deleteEpic(int id);

    /**
     * Возвращает список подзадач, связанных с указанным эпиком.
     *
     * @param id Идентификатор эпика.
     * @return Список подзадач, связанных с указанным эпиком.
     */
    List<SubTask> getEpicSubtasks(int id);

    /**
     * Возвращает список всех эпиков.
     *
     * @return Список всех эпиков.
     */
    List<Epic> getAllEpics();

    /**
     * Удаляет все эпики и все их подзадачи.
     * Удаляет эпики из списков, а также удаляет все сопутствующие задачи из истории и списка приоритетных задач.
     */
    void deleteAllEpics();

    /**
     * Возвращает список задач из истории.
     *
     * @return Список задач из истории.
     */
    List<Task> getHistory();

    /**
     * Возвращает список приоритетных задач.
     *
     * @return Список приоритетных задач.
     */
    List<Task> getPrioritizedTasks();
}
